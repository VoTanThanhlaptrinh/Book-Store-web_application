/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */
plugins {
    id 'java-library'
    id 'maven-publish'
	id 'org.hidetake.ssh' version '2.11.2'
    id 'war'
}
remotes {
    connect {
        host = '192.168.113.130' // địa chỉ ip của ens khi bật ip addr
        user = 'user' // username 
        password = 'user12345' //password
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
}
task docker_app_start {
        println 'Start docker_app_start...'
        ssh.run {
            session(remotes.connect) {
            	execute 'docker network create connect'
            	execute 'docker stop tomcat_container', ignoreError: true
                // Xóa container cũ nếu tồn tại
                execute 'docker rm -f tomcat_container', ignoreError: true
                // Khởi động container mới
                execute 'docker run -it -d --name tomcat_container --network connect -v /usr/deploy:/usr/local/tomcat/webapps -p 8080:8080 tomcat:10.1'
            }
        }
}
task docker_run_sqlserver {
		println 'begin docker_run_sqlserver'
		ssh.run {
            session(remotes.connect) {
            execute 'docker stop sqlserver', ignoreError: true
            execute 'docker rm -f sqlserver', ignoreError: true
			execute """docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=Sql@Server1" -p 1433:1433 --name sqlserver --network connect -d mcr.microsoft.com/mssql/server:2022-latest"""
	 		}
	 	}
}
task docker_upload_file_to_server {
        println 'begin docker_upload_file_to_server'
        ssh.run {
            session(remotes.connect) {
            	// xoá file war cũ khi chạy
                execute 'rm -f /usr/deploy/book_store.war'
                // đẩy file war máy thật vào máy ảo 
                put from: "${project.projectDir}/build/libs/app.war",into: "/usr/deploy/book_store.war"
                execute 'docker cp /usr/deploy/book_store.war tomcat_container:/usr/local/tomcat/webapps/BOOK_STORE.war'
                put from: "C:/Users/VO TAN THANH/eclipse-workspace/BOOK_STORE2/src/resources/data",into: "/home/user/sql_files/backup.bak"
                execute 'docker cp /home/user/sql_files/backup.bak sqlserver:/var/opt/mssql/data/backup.bak'
        }
    }
}

task docker_deploy {
    dependsOn docker_app_start
    dependsOn docker_run_sqlserver
    dependsOn docker_upload_file_to_server
    build
    docker_app_start.mustRunAfter docker_upload_file_to_server
    docker_run_sqlserver.mustRunAfter docker_upload_file_to_server
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation libs.guava
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.11.3')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}
war {
    archiveFileName = 'app.war'
}
